buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.32'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

mixin {
    disableAnnotationProcessorCheck()
}

minecraft {
   
   mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
   
   // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                greekfantasy {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                greekfantasy {
                    source sourceSets.main
                }
            }
        }
		
		data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'greekfantasy', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                greekfantasy {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { // JEI
        name 'mezz'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // CURSE
        name 'CurseMaven'
        url 'https://www.cursemaven.com/'
    }
    maven { // MODRINTH
        url 'https://api.modrinth.com/maven'
    }
    maven { // CLOTH CONFIG
        url "https://maven.shedaniel.me/"
    }
    maven { // CLOTH CONFIG
        url "https://maven.terraformersmc.com/releases/"
    }
    maven { // PLAYERANIMATOR
        name "KosmX's maven"
        url "https://maven.kosmx.dev/"
    }
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // RPG Gods
    implementation fg.deobf("curse.maven:rpggods-${project.rpggods_project}:${project.rpggods_file}")
    // JEI
	implementation fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    // Better Combat
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_animator_version}")
    implementation fg.deobf("maven.modrinth:better-combat:${project.better_combat_version}-forge")

}
// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors: mod_authors, mod_description: mod_description,
                         minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range,
                         loader_version_range: loader_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "${mod_authors}",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"skyjay1",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

javadoc {
  failOnError = false
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/source/main"
    classifier "deobf"
}
artifacts {
    archives deobfJar
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from "build/docs/javadoc"
    classifier "javadoc"
}
artifacts {
    archives javadocJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}